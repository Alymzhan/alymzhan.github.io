{"version":3,"sources":["components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/RoomList.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scollHeight","scrollToBottom","scrollHeight","roomId","messages","map","message","index","components_Message","key","senderId","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","console","log","onSubmit","disabled","onChange","placeholder","type","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","id","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","ChatkitClient","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","error","_this3","getJoinableRooms","_this4","hooks","onMessage","concat","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f84f237d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Message(props) {\r\n        return (\r\n            <div className=\"message\">\r\n                        <div className=\"message-username\">{props.username}</div>\r\n                        <div className=\"message-text\">{props.text}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Message","import React from 'react'\r\nimport Message from './Message'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\nclass MessageList extends React.Component {\r\n\r\n    componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scollHeight\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.scrollToBottom) {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        node.scrollTop = node.scrollHeight\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.roomId) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                        &larr; Join a room!\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"message-list\">\r\n                {this.props.messages.map((message, index) => {\r\n                    return (\r\n                        <Message key={index} username={message.senderId} text={message.text} />\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList","import React from 'react'\r\n\r\nclass SendMessageForm extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.sendMessage(this.state.message)\r\n        this.setState({\r\n            message: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.message);\r\n        return (\r\n            <form\r\n                onSubmit={this.handleSubmit} \r\n                className=\"send-message-form\">\r\n                <input\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.handleChange}\r\n                    value={this.state.message}\r\n                    placeholder=\"Type your message and hit ENTER\"\r\n                    type=\"text\" />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessageForm","import React from 'react'\r\n\r\nclass RoomList extends React.Component {\r\n    render() {\r\n        const orderedRooms = [...this.props.rooms].sort((a,b) => a.id - b.id)\r\n        return (\r\n            <div className=\"rooms-list\">\r\n            <div className=\"help-text\">RoomList</div>\r\n            <h3>Your rooms:</h3>\r\n                <ul>\r\n                    \r\n                    {orderedRooms.map(room => {\r\n                        const active = this.props.roomId === room.id ? \"active\":\"\";\r\n                        return (\r\n                            <li key={room.id} className={\"room \" + active}>\r\n                                <a onClick={()=> {this.props.subscribeToRoom(room.id)}} href=\"#\"># {room.name}</a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoomList","import React from 'react'\r\n\r\nclass NewRoomForm extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.createRoom(this.state.roomName)\r\n        this.setState({\r\n            roomName: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input  \r\n                        value={this.state.roomName}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\"\r\n                        placeholder=\"Create a room\"\r\n                        required />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewRoomForm","import React, { Component } from 'react';\r\nimport MessageList from './components/MessageList';\r\nimport './App.css';\r\nimport './style.css';\r\nimport ChatkitClient from '@pusher/chatkit-client'\r\nimport { instanceLocator, tokenUrl } from './config'\r\nimport SendMessageForm from './components/SendMessageForm';\r\nimport RoomList from './components/RoomList';\r\nimport NewRoomForm from './components/NewRoomForm';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      roomId: null,\r\n      messages: [],\r\n      joinableRooms: [],\r\n      joinedRooms: []\r\n    }\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\r\n    this.getRooms = this.getRooms.bind(this);\r\n    this.createRoom = this.createRoom.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const chatManager = new ChatkitClient.ChatManager({\r\n        instanceLocator,\r\n        userId: 'pete',\r\n        tokenProvider: new ChatkitClient.TokenProvider({\r\n          url: tokenUrl\r\n        })\r\n    })\r\n    chatManager.connect()\r\n    .then(currentUser => {\r\n            this.currentUser = currentUser\r\n            this.getRooms()\r\n          })\r\n          .catch(err => console.error(\"error on connecting: \", err))\r\n  }\r\n\r\n  getRooms() {\r\n    this.currentUser.getJoinableRooms()\r\n            .then(joinableRooms => {\r\n              this.setState({\r\n                joinableRooms,\r\n                joinedRooms: this.currentUser.rooms\r\n              })\r\n            })\r\n            .catch(err => console.log('error on joinableRooms: ', err))\r\n  }\r\n\r\n  subscribeToRoom(roomId) {\r\n    this.setState({ messages: [] })\r\n    this.currentUser.subscribeToRoom({\r\n      roomId: roomId,\r\n      hooks: {\r\n        onMessage: message => {\r\n          console.log(`Received new message: ${message.text}`)\r\n          this.setState({\r\n            messages: [...this.state.messages, message]\r\n          })\r\n        }\r\n      }\r\n    })\r\n    .then(room => {\r\n      this.setState({\r\n        roomId: room.id\r\n      })\r\n      this.getRooms()\r\n    })\r\n    .catch(err => console.log('error on subscribing to room: ', err))\r\n  }\r\n\r\n  sendMessage(text) {\r\n    this.currentUser.sendMessage({\r\n      text,\r\n      roomId: this.state.roomId\r\n    })\r\n  }\r\n\r\n  createRoom(name) {\r\n    this.currentUser.createRoom({\r\n      name\r\n    })\r\n    .then(room => this.subscribeToRoom(room.id))\r\n    .catch(err => console.log('error creating room: ', err))\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.messages)\r\n    return (\r\n      <div className=\"app\">\r\n        <RoomList \r\n            roomId={this.state.roomId}\r\n            subscribeToRoom={this.subscribeToRoom}\r\n            rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\r\n        <MessageList \r\n            roomId={this.state.roomId}\r\n            messages={this.state.messages} />\r\n        <SendMessageForm \r\n            disabled={!this.state.roomId}\r\n            sendMessage={this.sendMessage} />\r\n        <NewRoomForm createRoom={this.createRoom} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/aafaa7f7-30f0-4b79-8726-da3e9c25baa7/token\";\r\n\r\nconst instanceLocator = \"v1:us1:aafaa7f7-30f0-4b79-8726-da3e9c25baa7\";\r\n\r\nexport { tokenUrl,instanceLocator }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}